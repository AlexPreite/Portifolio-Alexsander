<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Gastos</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
        import { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBlFODuPRjVS4vfyin6vNC13v4ATxF8g6A",
            authDomain: "controle-de-despesas-8bd81.firebaseapp.com",
            projectId: "controle-de-despesas-8bd81",
            storageBucket: "controle-de-despesas-8bd81.firebasestorage.app",
            messagingSenderId: "1071645887652",
            appId: "1:1071645887652:web:e2373db3e9bcc35e472a31"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        let userId;

        function login() {
            const provider = new GoogleAuthProvider();
            signInWithPopup(auth, provider).then(result => {
                userId = result.user.uid;
                carregarDados();
            });
        }

        function logout() {
            signOut(auth).then(() => {
                userId = null;
            });
        }

        let dadosMes = {};
        let mesAtual;
        let grafico;

        document.addEventListener("DOMContentLoaded", () => {
            mesAtual = document.getElementById('mes').value;
        });

        function mudarMes() {
            mesAtual = document.getElementById('mes').value;
            carregarDados();
        }

        function atualizarSaldo() {
            let receita = parseFloat(document.getElementById('receita').value) || 0;
            let investimento = receita * 0.1;
            let saldo = receita - investimento - (dadosMes[mesAtual]?.despesas.reduce((a, b) => a + b, 0) || 0);
            let saldoElem = document.getElementById('saldo');
            saldoElem.textContent = saldo.toFixed(2);
            saldoElem.className = saldo < 0 ? 'saldo-negativo' : '';
            salvarDados();
        }

        function adicionarDespesa() {
            let valor = parseFloat(document.getElementById('despesa').value) || 0;
            if (!dadosMes[mesAtual]) dadosMes[mesAtual] = { receita: 0, despesas: [] };
            dadosMes[mesAtual].despesas.push(valor);
            atualizarSaldo();
            atualizarGrafico();
        }

        function atualizarGrafico() {
            let ctx = document.getElementById('grafico').getContext('2d');
            if (grafico) grafico.destroy();
            grafico = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: dadosMes[mesAtual]?.despesas.map((_, i) => `Despesa ${i + 1}`) || [],
                    datasets: [{ label: 'Despesas', data: dadosMes[mesAtual]?.despesas || [], backgroundColor: 'red' }]
                }
            });
        }

        async function salvarDados() {
            if (userId) {
                await setDoc(doc(db, "usuarios", userId), { dadosMes }, { merge: true });
            }
        }

        async function carregarDados() {
            if (userId) {
                const docSnap = await getDoc(doc(db, "usuarios", userId));
                if (docSnap.exists()) {
                    dadosMes = docSnap.data().dadosMes;
                    atualizarSaldo();
                    atualizarGrafico();
                }
            }
        }

        onAuthStateChanged(auth, user => {
            if (user) {
                userId = user.uid;
                carregarDados();
            }
        });

        window.login = login;
        window.logout = logout;
        window.mudarMes = mudarMes;
        window.atualizarSaldo = atualizarSaldo;
        window.adicionarDespesa = adicionarDespesa;
    </script>
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; text-align: center; }
        .container { max-width: 600px; margin: 20px auto; background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px #ccc; }
        input, button, select { margin: 10px; padding: 10px; width: 100%; box-sizing: border-box; }
        .saldo-negativo { color: red; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Controle de Gastos</h2>
        <button onclick="login()">Login com Google</button>
        <button onclick="logout()">Sair</button>
        <label for="mes">Selecione o mês:</label>
        <select id="mes" onchange="mudarMes()">
            <script>
                for (let ano = 2025; ano <= 2030; ano++) {
                    for (let mes of ['Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro', 'Janeiro', 'Fevereiro']) {
                        document.write(`<option value="${mes} ${ano}">${mes} ${ano}</option>`);
                    }
                }
            </script>
        </select>
        <label>Receita Mensal:</label>
        <input type="number" id="receita" oninput="atualizarSaldo()">
        <label>Despesa:</label>
        <input type="number" id="despesa">
        <button onclick="adicionarDespesa()">Adicionar Despesa</button>
        <h3>Saldo: <span id="saldo">0</span></h3>
        <canvas id="grafico"></canvas>
    </div>
</body>
</html>
